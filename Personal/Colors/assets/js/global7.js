jQuery(document).ready(function($) {

    var coloursArray =  [
      '#000000',
      '#00008B',
      '#0000FF',
      '#001221',
      '#002240',
      '#002451',
      '#002B36',
      '#003A66',
      '#005E00',
      '#0073F9',
      '#048DC7',
      '#050F1F',
      '#080808',
      '#09D1C4',
      '#0B0A09',
      '#0D3349',
      '#0D6698',
      '#0F0040',
      '#0F0F0F',
      '#0F6AB4',
      '#103144',
      '#10A54A',
      '#10C399',
      '#130D26',
      '#13AFDC',
      '#141414',
      '#151C19',
      '#15B1B4',
      '#161616',
      '#181818',
      '#18273A',
      '#191919',
      '#1B2536',
      '#1B2C42',
      '#1C1C1C',
      '#1D1F21',
      '#1D1F24',
      '#1D1F25',
      '#208CCA',
      '#213045',
      '#213147',
      '#222222',
      '#222C28',
      '#223145',
      '#22496D',
      '#22ABF3',
      '#25354D',
      '#262A34',
      '#265A88',
      '#272727',
      '#272822',
      '#273242',
      '#282800',
      '#282B32',
      '#286090',
      '#292D37',
      '#29364A',
      '#29C1C1',
      '#2A3B4F',
      '#2AABD2',
      '#2B3A4E',
      '#2B81AF',
      '#2B93D5',
      '#2C2828',
      '#2C303A',
      '#2C3B58',
      '#2C3E57',
      '#2D2D2D',
      '#2DAD24',
      '#2DC376',
      '#2E313A',
      '#2E354A',
      '#2E3749',
      '#2E6DA4',
      '#2EC6C8',
      '#2ECE79',
      '#2F3F57',
      '#304158',
      '#31354A',
      '#31708F',
      '#31B0D5',
      '#31BDEB',
      '#323232',
      '#323753',
      '#333333',
      '#337AB7',
      '#3399FF',
      '#34465F',
      '#34B2DB',
      '#353E52',
      '#36475F',
      '#384962',
      '#393D48',
      '#39476B',
      '#3B4E5F',
      '#3B5275',
      '#3C763D',
      '#3D4D65',
      '#3D5A7F',
      '#3F516B',
      '#3FA499',
      '#40516A',
      '#41455D',
      '#41526B',
      '#41536E',
      '#416590',
      '#419641',
      '#436EA4',
      '#4495E0',
      '#449D44',
      '#45566D',
      '#47A4FF',
      '#4B5E7B',
      '#4BA8FF',
      '#4C7CB8',
      '#4D98E2',
      '#4D99DD',
      '#4E607B',
      '#4E74A1',
      '#4F5E75',
      '#4F6483',
      '#509FF2',
      '#50AAFF',
      '#50B432',
      '#5272FF',
      '#545454',
      '#547F00',
      '#562D56',
      '#57ADF3',
      '#597EAA',
      '#597FAA',
      '#5A6784',
      '#5AB0EE',
      '#5B93E1',
      '#5BA7E1',
      '#5BC0DE',
      '#5CB85C',
      '#5E5E5E',
      '#5FA7EB',
      '#5FA8F3',
      '#5FAAF6',
      '#60ACEB',
      '#60ACF1',
      '#60B2FF',
      '#616161',
      '#61708A',
      '#6185B0',
      '#6199DF',
      '#61ADEB',
      '#61ADF0',
      '#62ACF0',
      '#62AFE9',
      '#63A5E7',
      '#63ADEE',
      '#64708E',
      '#647997',
      '#64AAAF',
      '#64ADEE',
      '#64B0E5',
      '#656C7C',
      '#65AFE7',
      '#6689B4',
      '#66A6E5',
      '#66B0EA',
      '#67A9C4',
      '#6884FF',
      '#688E5F',
      '#68B0EC',
      '#68B7F4',
      '#68C76A',
      '#69B8EE',
      '#6BB6F4',
      '#6CB6F5',
      '#6DBAE7',
      '#6DBCF5',
      '#6F798E',
      '#70BFDF',
      '#70C3FF',
      '#7187A8',
      '#7193BA',
      '#73AC71',
      '#76B9ED',
      '#777777',
      '#77A2DE',
      '#7E8DAD',
      '#800F00',
      '#848DAC',
      '#848FA4',
      '#8694B5',
      '#8793AF',
      '#8795B3',
      '#87CEEB',
      '#888888',
      '#8959A8',
      '#89BF04',
      '#8A6D3B',
      '#8D9BB4',
      '#8E95F2',
      '#91A1B8',
      '#93CA3C',
      '#94C897',
      '#953232',
      '#96FF96',
      '#97C8EB',
      '#990000',
      '#9CA1B0',
      '#9E8DD3',
      '#A086D3',
      '#A0A0A0',
      '#A285D6',
      '#A389D5',
      '#A41300',
      '#A41E22',
      '#A58BD6',
      '#A60115',
      '#A791D5',
      '#A7ADBA',
      '#A7AFC3',
      '#A94442',
      '#AA5252',
      '#AA5350',
      '#AAB6CB',
      '#AABBCC',
      '#ABEF56',
      '#ACB9C8',
      '#AE81FF',
      '#AF85C9',
      '#AF956F',
      '#AFB1BE',
      '#AFBACD',
      '#AFD9EE',
      '#B2BBD0',
      '#B2E7E5',
      '#B52A1D',
      '#B5B9C7',
      '#B5FFBB',
      '#B6BDD2',
      '#B798BF',
      '#B7D7F1',
      '#BADAFF',
      '#BBBBBB',
      '#BBBBFF',
      '#BBC2CD',
      '#BDC7D2',
      '#BFCFDA',
      '#C12E2A',
      '#C1E2B3',
      '#C2CBE0',
      '#C4E3F3',
      '#C5862B',
      '#C68185',
      '#C6D5DE',
      '#C6E746',
      '#C82829',
      '#C9302C',
      '#C95F64',
      '#CC99CC',
      '#CCCCFF',
      '#CCFFCC',
      '#CDD4DE',
      '#CDD7E5',
      '#CED6DD',
      '#CF5E73',
      '#CFDFE8',
      '#D0D7E7',
      '#D0E9C6',
      '#D1D1D1',
      '#D1D3D9',
      '#D2E0E6',
      '#D2F7DA',
      '#D38042',
      '#D39D23',
      '#D3D1D1',
      '#D3F6DA',
      '#D4F9C9',
      '#D5DCEB',
      '#D63767',
      '#D63969',
      '#D7D7D7',
      '#D7DAE4',
      '#D7DDEB',
      '#D7F6DD',
      '#D8E2EA',
      '#D9534F',
      '#D9DDE6',
      '#D9DFE9',
      '#D9EDF7',
      '#DAD8D8',
      '#DBDEE8',
      '#DBE0E8',
      '#DBE2EB',
      '#DBECF3',
      '#DCBD80',
      '#DCDCDC',
      '#DCE0E2',
      '#DCE0EA',
      '#DCE0EB',
      '#DCE1EB',
      '#DD537E',
      '#DDDDDD',
      '#DDE1EB',
      '#DDFFDD',
      '#DEDDDD',
      '#DEDFE3',
      '#DEE3EC',
      '#DF5F5F',
      '#DFE1E7',
      '#DFE5ED',
      '#DFE8F0',
      '#DFF0D8',
      '#E0DCEE',
      '#E0E0E0',
      '#E0E0FF',
      '#E0E2EB',
      '#E0E3EC',
      '#E0E3ED',
      '#E0F2BE',
      '#E1DCB8',
      '#E1E3EC',
      '#E1EDF3',
      '#E2E5EE',
      '#E3D2D2',
      '#E3E0ED',
      '#E3E3E3',
      '#E3EAEF',
      '#E4B9B9',
      '#E4E4E4',
      '#E4E4EE',
      '#E4E9EE',
      '#E5E5E5',
      '#E5F2FF',
      '#E6E6E6',
      '#E6E9EF',
      '#E6E9F0',
      '#E7E6E6',
      '#E7E7E7',
      '#E7E8F3',
      '#E7E9EF',
      '#E7EAEE',
      '#E7EAEF',
      '#E7EAF0',
      '#E7EBF3',
      '#E7EDF3',
      '#E7F0F7',
      '#E7F6EC',
      '#E8E8E8',
      '#E8E9EC',
      '#E8EAF3',
      '#E8EBF2',
      '#E8ECF0',
      '#E92E2E',
      '#E9E9E9',
      '#E9EBF2',
      '#E9EDF8',
      '#E9F2FA',
      '#EAEAEA',
      '#EAEDF2',
      '#EAEDF6',
      '#EAEDF7',
      '#EB9316',
      '#EBBBFF',
      '#EBCCCC',
      '#EBEBEB',
      '#EBEBF3',
      '#EBEEF2',
      '#EBEEF5',
      '#EBF3F9',
      '#EBF7F0',
      '#EC971F',
      '#ECECEC',
      '#ECEFF2',
      '#ECF0F7',
      '#EDEDED',
      '#EDEDFD',
      '#EDEEF3',
      '#EDEFF5',
      '#EDF0F6',
      '#EDF0F7',
      '#EDF1F4',
      '#EDF2F6',
      '#EDF3F8',
      '#EDF4FA',
      '#EE5757',
      '#EEEEEE',
      '#EEEEFF',
      '#EEEFF4',
      '#EEF0E9',
      '#EEF1F6',
      '#EEF1F8',
      '#EEF1FA',
      '#EEF2F9',
      '#EEF2FA',
      '#EEF5FC',
      '#EEFCE4',
      '#EFEFEF',
      '#EFF0F7',
      '#EFF1F6',
      '#EFF2F7',
      '#EFF2F8',
      '#EFF2F9',
      '#F0AD4E',
      '#F0DDDD',
      '#F0F0F0',
      '#F0F0F7',
      '#F0F1F5',
      '#F0F2F5',
      '#F0F2F6',
      '#F0F2F7',
      '#F0F2F8',
      '#F0F3F7',
      '#F0F4FA',
      '#F1F1F4',
      '#F1F2F6',
      '#F1F3F5',
      '#F1F3F9',
      '#F1F3FA',
      '#F1F4F9',
      '#F1F4FA',
      '#F2777A',
      '#F29DA8',
      '#F2DEDE',
      '#F2F1A6',
      '#F2F1F1',
      '#F2F2F2',
      '#F2F3F5',
      '#F2F3F6',
      '#F2F3F7',
      '#F2F4F8',
      '#F3F3F3',
      '#F3F3F6',
      '#F3F3F8',
      '#F3F3FF',
      '#F3F5F8',
      '#F3F5F9',
      '#F3F5FA',
      '#F3F6FA',
      '#F3F7FB',
      '#F44C4C',
      '#F4F4F4',
      '#F4F4F6',
      '#F4F4FB',
      '#F4F4FF',
      '#F4F5F9',
      '#F4F6FB',
      '#F4F7F9',
      '#F4F7FA',
      '#F4F9FD',
      '#F5E8E8',
      '#F5F495',
      '#F5F5F5',
      '#F5F5F7',
      '#F5F6F8',
      '#F5F6F9',
      '#F5F7F9',
      '#F5F7FA',
      '#F5F8FB',
      '#F6F4F4',
      '#F6F6F6',
      '#F6F6FA',
      '#F6F6FC',
      '#F6F6FF',
      '#F6F7F8',
      '#F6F7F9',
      '#F6F8FB',
      '#F6F8FC',
      '#F7ECB5',
      '#F7EDED',
      '#F7F5F5',
      '#F7F7F7',
      '#F7F7F9',
      '#F7F7FA',
      '#F7F8F9',
      '#F7F8FA',
      '#F7F8FF',
      '#F7F9F9',
      '#F7F9FA',
      '#F7F9FC',
      '#F7FAFF',
      '#F87676',
      '#F8F8F8',
      '#F8F8FA',
      '#F8F8FE',
      '#F8F9FB',
      '#F8F9FC',
      '#F8F9FD',
      '#F8FAFE',
      '#F92672',
      '#F99DA5',
      '#F9F2E9',
      '#F9F2F4',
      '#F9F9F9',
      '#F9F9FB',
      '#F9F9FE',
      '#F9FAFB',
      '#F9FAFD',
      '#F9FBFD',
      '#FAF0EF',
      '#FAF2CC',
      '#FAF5EE',
      '#FAFAFA',
      '#FAFAFB',
      '#FAFBFE',
      '#FBFBFB',
      '#FBFBFC',
      '#FBFBFF',
      '#FBFCFD',
      '#FBFCFE',
      '#FBFDFE',
      '#FC7715',
      '#FC88A2',
      '#FCC80C',
      '#FCE9E3',
      '#FCF6DB',
      '#FCF8E3',
      '#FCFCFC',
      '#FCFCFD',
      '#FCFCFF',
      '#FCFFCD',
      '#FD8958',
      '#FDF6E3',
      '#FDFDBA',
      '#FDFDFD',
      '#FE3838',
      '#FEFEE3',
      '#FEFEFE',
      '#FF0000',
      '#FF002A',
      '#FFAAAA',
      '#FFBBBB',
      '#FFC0CB',
      '#FFCACA',
      '#FFCCCC',
      '#FFCD2B',
      '#FFD20F',
      '#FFD700',
      '#FFDCE0',
      '#FFDDDD',
      '#FFE7A1',
      '#FFEE11',
      '#FFEEBB',
      '#FFF5E6',
      '#FFF980',
      '#FFF9F0',
      '#FFFBBF',
      '#FFFCE5',
      '#FFFCE6',
      '#FFFCE7',
      '#FFFCF7',
      '#FFFDEA',
      '#FFFF00',
      '#FFFFCC',
      '#FFFFDD',
      '#FFFFE0',
      '#FFFFE5',
      '#FFFFE8',
      '#FFFFEE',
      '#FFFFFF'
    ];

    function displayColor(color, parent) {
        var div = document.createElement('div');
        var colorName = document.createElement('h3');

        console.log($('#Sorted div').length && $('#Original div').length);
        // console.log(color.length);

        div.style.backgroundColor = color;
        colorName.innerHTML = color;

        div.style.position = 'relative';
        parent.appendChild(div);
        div.appendChild(colorName);
        // console.log(color);
    }

    function displayColors(id, colors) {
        var div = document.createElement("div");
        var head = document.createElement('h1');
        div.id = id;

        head.innerHTML = id;

        div.appendChild(head);

        for (var i = 0; i < colors.length; i++)
            displayColor(colors[i], div);

        document.body.appendChild(div);
    }

    function hexToRgb(hex) {
        hex = hex.substring(1, hex.length);
        var r = parseInt((hex).substring(0, 2), 16);
        var g = parseInt((hex).substring(2, 4), 16);
        var b = parseInt((hex).substring(4, 6), 16);

        return [r, g, b];
    }

    function rgbToHex(rgb) {
        return "#" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);
    }

    function colorDistance(color1, color2) {
        // This is actually the square of the distance but
        // this doesn't matter for sorting.
        var result = 0;
        for (var i = 0; i < color1.length; i++)
            result += (color1[i] - color2[i]) * (color1[i] - color2[i]);
        return result;
    }

    function sortColors(colors) {
        // Calculate distance between each color
        var distances = [];
        for (var i = 0; i < colors.length; i++) {
            distances[i] = [];
            for (var j = 0; j < i; j++)
                distances.push([colors[i], colors[j], colorDistance(colors[i], colors[j])]);
        }
        distances.sort(function(a, b) {
            return a[2] - b[2];
        });

        // Put each color into separate cluster initially
        var colorToCluster = {};
        for (var i = 0; i < colors.length; i++)
            colorToCluster[colors[i]] = [colors[i]];

        // Merge clusters, starting with lowest distances
        var lastCluster;
        for (var i = 0; i < distances.length; i++) {
            var color1 = distances[i][0];
            var color2 = distances[i][1];
            var cluster1 = colorToCluster[color1];
            var cluster2 = colorToCluster[color2];
            if (!cluster1 || !cluster2 || cluster1 == cluster2)
                continue;

            // Make sure color1 is at the end of its cluster and
            // color2 at the beginning.
            if (color1 != cluster1[cluster1.length - 1])
                cluster1.reverse();
            if (color2 != cluster2[0])
                cluster2.reverse();

            // Merge cluster2 into cluster1
            cluster1.push.apply(cluster1, cluster2);
            delete colorToCluster[color1];
            delete colorToCluster[color2];
            colorToCluster[cluster1[0]] = cluster1;
            colorToCluster[cluster1[cluster1.length - 1]] = cluster1;
            lastCluster = cluster1;
        }

        // By now all colors should be in one cluster
        return lastCluster;
    }

    displayColors("Original", coloursArray);
    var rgbArr = coloursArray.map(hexToRgb);
    var sortedRgbArr = sortColors(rgbArr);
    var finalArray = sortedRgbArr.map(rgbToHex);
    displayColors("Sorted", finalArray);

});