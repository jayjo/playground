jQuery(document).ready(function($) {

    var coloursArray =  [
      '#000000',
      '#0000AA',
      '#00346E',
      '#006E9C',
      '#00AA00',
      '#00CC00',
      '#050F1F',
      '#061127',
      '#080808',
      '#0A246A',
      '#0A8CA9',
      '#0B88C7',
      '#0C1A35',
      '#0D8FCA',
      '#0E91BF',
      '#0F839B',
      '#101010',
      '#10A0D4',
      '#111111',
      '#16B3B6',
      '#182D47',
      '#1B2536',
      '#1BB8DE',
      '#1CCDCF',
      '#1DC1E2',
      '#1E2938',
      '#1E2939',
      '#1E304D',
      '#1F2A3B',
      '#1FA8AA',
      '#202020',
      '#222222',
      '#23527C',
      '#243150',
      '#245269',
      '#252832',
      '#262934',
      '#26B2DF',
      '#273B5D',
      '#275FFF',
      '#282A2E',
      '#28384F',
      '#286090',
      '#2A4566',
      '#2B3A51',
      '#2B542C',
      '#2B9ECB',
      '#2C496D',
      '#2CBCBE',
      '#2D303B',
      '#2E313C',
      '#2E323C',
      '#2E3C58',
      '#2E3C5B',
      '#2E3F58',
      '#2F3F57',
      '#303F56',
      '#304253',
      '#3086C4',
      '#313F54',
      '#31708F',
      '#31B0D5',
      '#327FBD',
      '#328EEC',
      '#333333',
      '#333435',
      '#337AB7',
      '#343434',
      '#344A5F',
      '#353637',
      '#363946',
      '#363C80',
      '#37ABA9',
      '#384962',
      '#384F66',
      '#393E4A',
      '#394153',
      '#394253',
      '#394A62',
      '#3A3E4A',
      '#3A4A62',
      '#3A8CDA',
      '#3B3F4A',
      '#3B99F0',
      '#3C404B',
      '#3C4557',
      '#3C763D',
      '#3C86C5',
      '#3F4C61',
      '#3F5168',
      '#3F516B',
      '#3FA299',
      '#404040',
      '#404F7D',
      '#40516A',
      '#4086A3',
      '#409EF7',
      '#424B58',
      '#428FC8',
      '#4290C8',
      '#435572',
      '#444444',
      '#449D44',
      '#4572A7',
      '#458ED9',
      '#474747',
      '#474B59',
      '#47B6AC',
      '#49483E',
      '#498CCC',
      '#4A5173',
      '#4B4E55',
      '#4C92D7',
      '#4CA8FC',
      '#4D704D',
      '#4D93D7',
      '#4D98E2',
      '#4D9AD9',
      '#4E607B',
      '#4E6982',
      '#4E74A1',
      '#4F5153',
      '#4F5E75',
      '#4F6483',
      '#50771D',
      '#515968',
      '#52524D',
      '#5394D6',
      '#53A1DE',
      '#54A4DE',
      '#555555',
      '#559DE7',
      '#55A7E2',
      '#566885',
      '#57A0E8',
      '#584889',
      '#5890CB',
      '#5899DA',
      '#597EAA',
      '#599CD6',
      '#599EDC',
      '#59A0E1',
      '#59AAE9',
      '#5AA1E2',
      '#5AB0EE',
      '#5B80B2',
      '#5B9CF0',
      '#5BA7E1',
      '#5BB3EF',
      '#5BC0DE',
      '#5CB85C',
      '#5DA4EC',
      '#5DA5DD',
      '#5E5E5E',
      '#5E6B88',
      '#5FA4DE',
      '#5FABF1',
      '#606060',
      '#60708D',
      '#60ACF1',
      '#636A7E',
      '#63A5E8',
      '#63AA5E',
      '#63ADEE',
      '#66512C',
      '#666666',
      '#666699',
      '#688CB6',
      '#6890D5',
      '#68C76A',
      '#697595',
      '#6A6A6A',
      '#6C7B96',
      '#6CB4EB',
      '#6F7D9B',
      '#6FAFE1',
      '#7193BA',
      '#725A9F',
      '#73AC71',
      '#747D94',
      '#748195',
      '#74C3FF',
      '#75B7F3',
      '#76BCEF',
      '#777777',
      '#7784A1',
      '#787D95',
      '#78CDC4',
      '#7AAAEE',
      '#7C7BA9',
      '#7C98A9',
      '#7CA7DC',
      '#7DA5DC',
      '#7DBDEE',
      '#808080',
      '#818DA1',
      '#819CC0',
      '#83C4F2',
      '#843534',
      '#848DAC',
      '#8590A5',
      '#86679A',
      '#878DE7',
      '#888888',
      '#89C8F0',
      '#8A6D3B',
      '#8A92A5',
      '#8CBF90',
      '#8D08D0',
      '#8E9CB5',
      '#909090',
      '#919B9C',
      '#91FF00',
      '#92A0C0',
      '#969696',
      '#989FA9',
      '#999999',
      '#99A3B5',
      '#99CC99',
      '#9AA3C1',
      '#9C9C9C',
      '#9CA9C3',
      '#9D84CA',
      '#9D9D9D',
      '#9F9F9F',
      '#A0A0A0',
      '#A0A7BD',
      '#A1A1A1',
      '#A1ABC8',
      '#A2ABC0',
      '#A2BBCE',
      '#A67EBF',
      '#A6A6A6',
      '#A6E1EC',
      '#A7A7A7',
      '#A7DD97',
      '#A94442',
      '#A9734B',
      '#AAAAAA',
      '#ABC6DD',
      '#ACACAC',
      '#ACB0B7',
      '#ACB9C8',
      '#ADADB6',
      '#AEAFAD',
      '#AFAFAF',
      '#B1B0B9',
      '#B1B1B8',
      '#B1BCCA',
      '#B29CDC',
      '#B2B7BB',
      '#B2BBD0',
      '#B3474D',
      '#B3C7E1',
      '#B4B9C5',
      '#B4BAC9',
      '#B4BEC8',
      '#B5B7C3',
      '#B5BED4',
      '#B5C5D1',
      '#B6C0CE',
      '#B7B7B7',
      '#B7B7BE',
      '#B7C0CA',
      '#B7C4CD',
      '#B7C5D0',
      '#B7E7C1',
      '#B82E56',
      '#B8C1D4',
      '#B8C3C9',
      '#BABABA',
      '#BAC0CF',
      '#BBBBBB',
      '#BBC4D0',
      '#BBD8F7',
      '#BC7A7E',
      '#BCBCCB',
      '#BCC5D0',
      '#BCE8F1',
      '#BDBDBD',
      '#BDBDC5',
      '#BDBDCE',
      '#BDC3CF',
      '#BDC6CB',
      '#BDC7D2',
      '#BDD5FC',
      '#BE1E1E',
      '#BEBEBE',
      '#BEC3D3',
      '#BEC4D4',
      '#BEC8D5',
      '#BEE1C6',
      '#BFBFBF',
      '#BFBFD6',
      '#BFC8D3',
      '#BFCDD7',
      '#BFCEDA',
      '#BFCFD9',
      '#BFCFDA',
      '#C0402A',
      '#C0C0C0',
      '#C0C3CF',
      '#C0C3D2',
      '#C0C621',
      '#C0C6D5',
      '#C0C9D4',
      '#C0C9DC',
      '#C0CAD6',
      '#C1C1C1',
      '#C1C5D3',
      '#C1CAD5',
      '#C1D1DC',
      '#C2C2D3',
      '#C3C1C1',
      '#C3D9EC',
      '#C3E8D1',
      '#C4C8CC',
      '#C4C9D8',
      '#C4CCE4',
      '#C4CFD7',
      '#C4E3F3',
      '#C5CBD9',
      '#C6C6CE',
      '#C6C6D0',
      '#C6C6D1',
      '#C6E746',
      '#C7C7C7',
      '#C7C8CC',
      '#C7CDDB',
      '#C7CFD9',
      '#C7CFE0',
      '#C7D0DC',
      '#C7DDEF',
      '#C89520',
      '#C8C8C8',
      '#C8CAD9',
      '#C8CBD2',
      '#C8D5DE',
      '#C9302C',
      '#C9C6A3',
      '#C9C9C9',
      '#C9C9D3',
      '#C9CCDB',
      '#C9CFDE',
      '#C9D0D6',
      '#C9D1E8',
      '#C9DAE5',
      '#C9E2B3',
      '#CACAD4',
      '#CACBD2',
      '#CACEDB',
      '#CACFDC',
      '#CAD0D9',
      '#CBCFD4',
      '#CBCFD9',
      '#CBD2DA',
      '#CBD2DB',
      '#CC0000',
      '#CC9900',
      '#CCCCCC',
      '#CCCCD6',
      '#CCD1DD',
      '#CCD2E1',
      '#CCD5E0',
      '#CDCDCD',
      '#CDD0D8',
      '#CDD2DE',
      '#CDD5DE',
      '#CDD8E1',
      '#CED3E0',
      '#CED4E0',
      '#CED4E1',
      '#CED6DD',
      '#CED6E2',
      '#CED9E3',
      '#CEDDE7',
      '#CEDDE8',
      '#CF4862',
      '#CFCFCF',
      '#CFD0D1',
      '#CFD3DE',
      '#CFD3E1',
      '#CFD4DC',
      '#CFD6DF',
      '#CFD7DF',
      '#CFDFE8',
      '#D0D5E0',
      '#D0D7E5',
      '#D1B379',
      '#D1D1D1',
      '#D1D2DB',
      '#D1D3DA',
      '#D1DEE6',
      '#D2536A',
      '#D2D2D2',
      '#D2DDE5',
      '#D2DFE7',
      '#D30102',
      '#D3B385',
      '#D3DDE5',
      '#D3DFE7',
      '#D4D0C8',
      '#D4D4D4',
      '#D4D9E5',
      '#D4DAE7',
      '#D4E0E8',
      '#D5D5D5',
      '#D5D5DE',
      '#D5D6D8',
      '#D5D7E1',
      '#D5D9DF',
      '#D5D9E0',
      '#D5DAE4',
      '#D5DBEC',
      '#D5DBED',
      '#D5DCE3',
      '#D5DEE6',
      '#D5E3EA',
      '#D5E3EB',
      '#D63767',
      '#D63969',
      '#D6D6D6',
      '#D6D8E1',
      '#D6DCE6',
      '#D6E9C6',
      '#D7D7D7',
      '#D7D9CE',
      '#D7D9DE',
      '#D7DCE5',
      '#D7DCE8',
      '#D7DDE2',
      '#D7DDE5',
      '#D7DDEB',
      '#D8DCE2',
      '#D8DCE5',
      '#D8DDE6',
      '#D8DEE6',
      '#D8DFEA',
      '#D8E7EF',
      '#D9534F',
      '#D9D9D9',
      '#D9DCE6',
      '#D9DDE3',
      '#D9DDE5',
      '#D9DEEA',
      '#D9E1EA',
      '#D9EDF7',
      '#DADFE8',
      '#DADFEA',
      '#DAE0EA',
      '#DAE0EC',
      '#DAE1EB',
      '#DAE1EC',
      '#DBDBDB',
      '#DBDEE9',
      '#DBDFE8',
      '#DBDFEF',
      '#DBE0EB',
      '#DBE1EB',
      '#DBE7EE',
      '#DBE7EF',
      '#DCDCDC',
      '#DCDDEB',
      '#DCE0E8',
      '#DCE0EA',
      '#DCE6ED',
      '#DCE7EE',
      '#DCE7EF',
      '#DD537E',
      '#DDDDDD',
      '#DDE5EA',
      '#DDE8EF',
      '#DDFDDF',
      '#DEDDDD',
      '#DEDEDE',
      '#DEDEE6',
      '#DEDFE3',
      '#DEE3EC',
      '#DEE3EE',
      '#DFDEE4',
      '#DFDFDF',
      '#DFE0E3',
      '#DFE0E8',
      '#DFE3E9',
      '#DFE3EC',
      '#DFE6ED',
      '#DFE6EF',
      '#DFE6F0',
      '#DFE8F0',
      '#DFE9EF',
      '#DFF0D8',
      '#E0E0E4',
      '#E0E0EB',
      '#E0E0FF',
      '#E0E3E8',
      '#E0E3EC',
      '#E0E4EC',
      '#E0E8F5',
      '#E0EAF0',
      '#E0ECD8',
      '#E1E1E1',
      '#E1E3ED',
      '#E1E4ED',
      '#E1E7FA',
      '#E1E9EE',
      '#E2E2E2',
      '#E2E3E6',
      '#E2E4E8',
      '#E2E5F2',
      '#E3E3E3',
      '#E3E3E8',
      '#E3E6ED',
      '#E3E6EF',
      '#E3E6F0',
      '#E3EAEF',
      '#E4B9C0',
      '#E4E4E4',
      '#E4E4EA',
      '#E4E5E5',
      '#E4E5E9',
      '#E4E6ED',
      '#E4E8F2',
      '#E4E9EE',
      '#E4E9EF',
      '#E4E9F7',
      '#E5E0C6',
      '#E5E5E5',
      '#E5E6EB',
      '#E5EBF7',
      '#E6E0BC',
      '#E6E6E6',
      '#E6E7ED',
      '#E6E9EE',
      '#E6E9F0',
      '#E7E7E7',
      '#E7E9F0',
      '#E7EAF0',
      '#E7EAF1',
      '#E7EBF0',
      '#E7EBF1',
      '#E7EBF2',
      '#E7ECF0',
      '#E84D6E',
      '#E8605E',
      '#E8C6C7',
      '#E8E8E8',
      '#E8E8EA',
      '#E8EAEE',
      '#E8EBF3',
      '#E8ECF0',
      '#E8EDF0',
      '#E9BDC2',
      '#E9E9E9',
      '#E9ECF2',
      '#EAEAEA',
      '#EAEBEE',
      '#EAEDF7',
      '#EAEEF2',
      '#EAEEF5',
      '#EAEFF6',
      '#EB4958',
      '#EBCCD1',
      '#EBEBEB',
      '#EBEFF6',
      '#EBF0F8',
      '#EC971F',
      '#ECECEC',
      '#ECF1F5',
      '#EDC9CD',
      '#EDECD6',
      '#EDF0F7',
      '#EDF0F8',
      '#EE0000',
      '#EE5757',
      '#EEEBCD',
      '#EEEEEE',
      '#EEF1F8',
      '#EEF1FB',
      '#EFF0F6',
      '#EFF2F9',
      '#F0AD4E',
      '#F0CECB',
      '#F0E0CA',
      '#F0E0E0',
      '#F0F0EE',
      '#F0F1F5',
      '#F0F2F3',
      '#F0F2F6',
      '#F1F3F5',
      '#F1F3F7',
      '#F1F3F9',
      '#F1F4FA',
      '#F2F3F8',
      '#F3F3C5',
      '#F3F3F6',
      '#F3F3F8',
      '#F4F4F4',
      '#F4F4FE',
      '#F5C422',
      '#F5D5C3',
      '#F5F5F5',
      '#F7E1B5',
      '#F7F7F7',
      '#F7F9FC',
      '#F8B14A',
      '#F8F8F0',
      '#F8F8F8',
      '#F9FAFD',
      '#FAEBCC',
      '#FAFAFA',
      '#FAFBFD',
      '#FBFBFB',
      '#FBFBFC',
      '#FCE94F',
      '#FF6464',
      '#FF6600',
      '#FF900C',
      '#FF9900',
      '#FFBA18',
      '#FFBD69',
      '#FFD20F',
      '#FFEE88',
      '#FFFCF7',
      '#FFFEE8',
      '#FFFFFF'
    ];

    function displayColor(color, parent) {
        var div = document.createElement('div');
        var colorName = document.createElement('h3');

        console.log($('#Sorted div').length && $('#Original div').length);
        // console.log(color.length);

        div.style.backgroundColor = color;
        colorName.innerHTML = color;

        div.style.position = 'relative';
        parent.appendChild(div);
        div.appendChild(colorName);
        // console.log(color);
    }

    function displayColors(id, colors) {
        var div = document.createElement("div");
        var head = document.createElement('h1');
        div.id = id;

        head.innerHTML = id;

        div.appendChild(head);

        for (var i = 0; i < colors.length; i++)
            displayColor(colors[i], div);

        document.body.appendChild(div);
    }

    function hexToRgb(hex) {
        hex = hex.substring(1, hex.length);
        var r = parseInt((hex).substring(0, 2), 16);
        var g = parseInt((hex).substring(2, 4), 16);
        var b = parseInt((hex).substring(4, 6), 16);

        return [r, g, b];
    }

    function rgbToHex(rgb) {
        return "#" + ((1 << 24) + (rgb[0] << 16) + (rgb[1] << 8) + rgb[2]).toString(16).slice(1);
    }

    function colorDistance(color1, color2) {
        // This is actually the square of the distance but
        // this doesn't matter for sorting.
        var result = 0;
        for (var i = 0; i < color1.length; i++)
            result += (color1[i] - color2[i]) * (color1[i] - color2[i]);
        return result;
    }

    function sortColors(colors) {
        // Calculate distance between each color
        var distances = [];
        for (var i = 0; i < colors.length; i++) {
            distances[i] = [];
            for (var j = 0; j < i; j++)
                distances.push([colors[i], colors[j], colorDistance(colors[i], colors[j])]);
        }
        distances.sort(function(a, b) {
            return a[2] - b[2];
        });

        // Put each color into separate cluster initially
        var colorToCluster = {};
        for (var i = 0; i < colors.length; i++)
            colorToCluster[colors[i]] = [colors[i]];

        // Merge clusters, starting with lowest distances
        var lastCluster;
        for (var i = 0; i < distances.length; i++) {
            var color1 = distances[i][0];
            var color2 = distances[i][1];
            var cluster1 = colorToCluster[color1];
            var cluster2 = colorToCluster[color2];
            if (!cluster1 || !cluster2 || cluster1 == cluster2)
                continue;

            // Make sure color1 is at the end of its cluster and
            // color2 at the beginning.
            if (color1 != cluster1[cluster1.length - 1])
                cluster1.reverse();
            if (color2 != cluster2[0])
                cluster2.reverse();

            // Merge cluster2 into cluster1
            cluster1.push.apply(cluster1, cluster2);
            delete colorToCluster[color1];
            delete colorToCluster[color2];
            colorToCluster[cluster1[0]] = cluster1;
            colorToCluster[cluster1[cluster1.length - 1]] = cluster1;
            lastCluster = cluster1;
        }

        // By now all colors should be in one cluster
        return lastCluster;
    }

    displayColors("Original", coloursArray);
    var rgbArr = coloursArray.map(hexToRgb);
    var sortedRgbArr = sortColors(rgbArr);
    var finalArray = sortedRgbArr.map(rgbToHex);
    displayColors("Sorted", finalArray);

});